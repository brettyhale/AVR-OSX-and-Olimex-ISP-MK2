################################################################################

## revision: 20190118 (brettyhale@gmail.c0m)

these are instructions for building an AVR GNU toolchain on OS X (Darwin),
and the AVRDUDE utility for use with the (Olimex) AVR-ISP-MK2 programmer.
it assumes familiarity with basic shell, command line tools, and MacPorts.

################################################################################

Q: why would we want to do this when MacPorts already provides us with an
AVR GNU toolchain, as well as AVRDUDE? all of which (as of this date) use
the latest releases of nearly all the required packages and tools?

there's no good reason if you're happy with the MacPorts infrastructure!
however, there may be good reasons to build the 'cutting edge' tools with
different requirements - or quarantine the cross compiler infrastructure,
as these instructions will.

another reason is that these instructions may provide enough information
to build the infrastructure on other UN*X / BSD platforms. but throughout
these instructions, OS X (Darwin), the 'XCode' development tools, as well
as the MacPorts infrastructure (currently 2.5.4) are assumed.

################################################################################

thanks to MacPorts, we can use the native gcc-8.2.0 compiler, which should
avoid many of the bootstrapping issues when building gcc cross compilers
and the related GNU tools. it is better to enter a new shell when building
the cross-compiler infrastructure, so that it isn't 'visible' in the $PATH
or $DYLD_LIBRARY_PATH when not in use.

> export CROSSDIR="${HOME}/cross"
> export PATH="${CROSSDIR}/bin:${PATH}"
> export DYLD_LIBRARY_PATH="${CROSSDIR}/lib:${DYLD_LIBRARY_PATH}"
> [rehash]

other shells may set environment variables with a different syntax, while
executables may need to be added to the shell's lookup (hash) tables after
installing new components, via an explicit 'rehash' for example.

> export CC=gcc; export CXX=g++

these default to the MacPorts gcc-8.2.0 build due to the port selection:
> [sudo] port select --set gcc mp-gcc8

note: the latest stable release of gcc is gcc-8.2.0. at this time, there
does not appear to be a stable 'gcc9' MacPort based on the release. it is
reasonable to expect this to appear soon, in which case it is recommended
to wait for a gcc-9.1 release. MacPort's gcc-8.2.0 defaults to C17, which
is a C11 'bug fix', and C++14.

Macport's clang-7.0 defaults to C11 and C++14. Apple's clang (800.0.42.1)
on this older iMac defaults to C11. adding the "-std=c++11 -stdlib=libc++"
options to Apple's clang++ (800.0.42.1) defaults to C++11.

most of the toolchain can be built with basic host optimization settings.
there's nothing to be gained by enabling excessive warnings. for example:

> export C[XX]FLAGS="-pipe -Wall -O2 -march=native" (or even just "-O2")

where these settings are not appropriate, the instructions will explicitly
assign the variables as command line arguments.

note: when building packages it is good practice to create, and configure
from, a 'build' directory. this convention is adopted all throughout these
instructions, using '$top_srcdir/build', and should work for any correctly
configured package using the GNU autotools. the ports: autoconf, automake,
libtool, and pkgconfig should be installed if they are not already.

################################################################################

gcc uses the GMP, MPFR, and MPC libraries to optimize numeric expressions
at compile-time. these need only be built *once* for re-use in each cross
compiler / toolchain.

## gmp-6.1.2 @ gmplib.org

> ../configure --prefix=$CROSSDIR --enable-cxx [--disable-fft]
> make [check]; make install

the 'ABI=64' option is not required for this platform. '--enable-cxx' is
required for C++ class bindings, while '--enable-fft' - the fast fourier
transform - is of no use to compiler optimizations. both may be of use to
other applications, so they might as well be built.

BTW, there's a useful little program called 'calc', which may be built by
going into the build directory: 'demos/calc' and invoking: 'make calc'.
it's a fast bignum calculator with some useful number theoretic functions.
the result is a shell-script wrapper for a file in '.libs' setting the
dynamic link path to the uninstalled gmp library - libtool magic for test
programs that rely on uninstalled libraries. consider moving '.libs/calc'
to '$CROSSDIR/bin/calc' to keep it.

## mpfr-4.0.1 @ mpfr.org

the MPFR library performs multiple-precision floating-point calculations
with correct rounding and well-defined semantics, much in the same way as
the IEEE-754 (and successive) standards.

> ../configure --prefix=$CROSSDIR --with-gmp=$CROSSDIR
> make [check]; make install

## mpc-1.1.0 @ multiprecision.org

the MPC library performs multiple-precision floating-point calculations
on *complex* numbers. it is built on the MPFR floating-point library, with
the same emphasis on correct rounding and semantics.

> ../configure --prefix=$CROSSDIR \
--with-gmp=$CROSSDIR --with-mpfr=$CROSSDIR
> make [check]; make install


## isl-0.20 @ isl.gforge.inria.fr (gcc.gnu.org/pub/gcc/infrastructure)

the isl library is required for gcc's 'graphite' loop optimizations. this
need only be built *once* for re-use in each cross compiler / toolchain.

> ../configure --prefix=$CROSSDIR --with-gmp-prefix=$CROSSDIR
> make [check]; make install

################################################################################

## binutils-2.31.1 @ https://ftp.gnu.org/gnu/binutils : target=avr

> ../configure --prefix=$CROSSDIR --target=avr \
--disable-nls --disable-werror
> make [check]; make install; [rehash]
> make install-html; make install-pdf # (requires a TeX distribution)

there was an issue building the pdfs: '/usr/bin/texi2dvi' as provided by
OS X 10.11.6 (this iMac is too old for upgrades) is (Texinfo) version 4.8.
installing the 'texinfo' MacPort includes texi2dvi (Texinfo) version 6.5,
which provides more of the required options: e.g., '--build-dir'

note: there has been no attempt to enable the 'gold' (ld.gold) linker for
this target via: '--enable-gold', nor has support for linker plugins been
enabled via: '--enable-plugins' - it is not clear that it would useful in
any case. furthermore, 'gold' does not appear to support AVR...


## gcc-8.2.0 @ gcc.gnu.org : target=avr

a gcc compiler is required to bootstrap a gcc build, which is emphasized
in almost every installation guide. with the MacPorts gcc-8.2.0 compiler,
we already have: CC=gcc, CXX=g++; if "$CROSSDIR/lib" isn't in the default
library path, it can be specified using LDFLAGS:

note: there are build errors using isl-0.20 for gcc-8.2.0; while isl-0.19
would be sufficient, 'gcc-8.2.0/gcc/graphite.h' can be patched to add the
two missing include headers for isl-0.20:

--- gcc/graphite.h      2018-01-03 20:03:58.000000000 +1000
+++ gcc/graphite.h      2019-01-18 16:53:29.000000000 +1000
@@ -37,6 +37,8 @@
 #include <isl/schedule.h>
 #include <isl/ast_build.h>
 #include <isl/schedule_node.h>
+#include <isl/id.h>
+#include <isl/space.h>
 
 typedef struct poly_dr *poly_dr_p;
 

> ../configure CFLAGS="-O2" CXXFLAGS="-O2" LDFLAGS="-L$CROSSDIR/lib" \
--prefix=$CROSSDIR --target=avr --enable-languages=c \
--disable-nls --disable-libssp --disable-werror \
--with-dwarf2 --with-local-prefix=$CROSSDIR \
--with-gmp=$CROSSDIR --with-mpfr=$CROSSDIR --with-mpc=$CROSSDIR \
--with-isl=$CROSSDIR --with-libiconv-prefix=/opt/local

note: '--with-avrlibc' is enabled by default, as is: '--enable-lto'

using the MacPorts libiconv-1.15 library is the easiest option.
configure reports the following as disabled, or not supported:

libgomp libatomic libitm libsanitizer libvtv libmpx libquadmath
libssp libstdc++-v3 gnattools gotools libada libhsail-rt libgfortran
libbacktrace libgo libffi libobjc liboffloadmic

most of these options are irrelevant or impractical for the avr platform.
threading is also disabled: the thread model set to 'single' as expected.
the multilib gcc startup and runtime support libraries for the different
AVR ISAs are built with the appropriate flags and optimizations.

> make; make install; [rehash]
> make install-html; make install-pdf # (requires a TeX distribution)


## avr-libc-2.0.0 @ nongnu.org/avr-libc

the build system is out of date in this release, e.g., the 'config.guess'
script cannot determine the build triple: 'x86_64-apple-darwin'. updating
with: 'sh ./bootstrap' in the top-level source directory, didn't work. of
course, 'autoreconf -fvi' will update 'config.guess' with the rest of the
build system, but generates warnings about non-POSIX names in Makefiles.

however, the '--build' option only describes the machine that avr-libc is
being built on, but the package is compiled with avr-gcc to generate code
for the family of AVR ISAs. in retrospect, it was sufficient to manually
specify: '--build=x86_64-apple-darwin'

there's no need to specify 'CFLAGS'. the build sets the appropriate flags
and optimizations when generating code for each device / ISA.

> ../configure CC=avr-gcc CFLAGS= --prefix=$CROSSDIR --host=avr \
[--build=x86_64-apple-darwin] --enable-debug-info=dwarf2
> make; make install

it's easier to download the pre-built html and pdf documentation packages
than to build them - which requires some extra image processing utilities.

################################################################################

## avrdude-6.3 @ nongnu.org/avrdude

patching avrdude and updating the programmer's firmware requires a return
to using MacPorts and its native (clang) compiler, i.e.,

> export CC=clang; export CXX="clang++ -std=c++11 -stdlib=libc++";

restore C[XX]FLAGS, or just retain: "-pipe -Wall -O2 [-march=native]"


the (Olimex) AVR-ISP-MKII programmer:

https://www.olimex.com/Products/AVR/Programmers/AVR-ISP-MK2\
/open-source-hardware

there are more sophisticated development boards and gear for AVR micros,
but this is a cheap way to get started. it's possible to program a device
using nothing but the programmer's USB to ICSP connection, which supplies
the required power, along with a few cheap components on a breadboard.

a summary of the avrdude and Olimex AVR-ISP-MK2 (dfu-programmer) bug fix:

https://www.olimex.com/forum/index.php?topic=5358.0
https://www.olimex.com/forum/index.php?topic=5401.0


install the avrdude package with MacPorts. libusb, libftdi1, etc., are too
much work to build from source. in any case, these ports will be reused by
the patched build of avrdude (and dfu-programmer).

> [sudo] port install avrdude [-universal]

the system-wide configuration file, assuming MacPorts has been installed
in the standard location, is: '/opt/local/etc/avrdude.conf'
furthermore, a user configuration file: '$HOME/.avrduderc' may be present.

> [sudo] port uninstall avrdude

the dependent ports required to build avrdude (as well as dfu-programmer)
remain installed. note, however, that these dependencies may be classified
as 'leaves' by the MacPorts database if they were not explicity installed
and have no other dependent ports. in the event of tidying up unused ports
for example, a command like:

> [sudo] port uninstall --follow-dependencies leaves

may remove some of the required packages used by the custom avrdude build.
to fix this, the dependent ports can be marked as 'requested'. to display
the (immediate) dependencies:

> port deps avrdude

might, for example, list: "libusb, ncurses, libftdi1, libelf, readline"
this list of packages can be marked as 'requested' with:

> [sudo] port setrequested libusb ncurses libftdi1 libelf readline


download the avrdude-6.3 source. in the top-level source directory, apply
the patch file, with locations at:

https://www.olimex.com/Products/AVR/Programmers/AVR-ISP-MK2\
/resources/endpointdetect_pass1.patch

https://savannah.nongnu.org/support/download.php?file_id=32171

> patch -i endpointdetect_pass1.patch --dry-run
> patch -i endpointdetect_pass1.patch

> autoreconf -fvi # do not use the 'bootstrap' script - it will fail.

> ../configure CPPFLAGS="-I/opt/local/include" LDFLAGS="-L/opt/local/lib" \
--prefix=$CROSSDIR --disable-parport
> make; make install; [rehash]

it's easier to simply download the pre-built documentation for avrdude and
install it under $CROSSDIR/share, for example.


## dfu-programmer-0.7.2 @ dfu-programmer.github.io

> ../configure CPPFLAGS="-I/opt/local/include" LDFLAGS="-L/opt/local/lib" \
--prefix=$CROSSDIR
> make; make install; [rehash]

The Olimex AVR-ISP-MK2 has firmware suited for 'AVR Studio'. for use with
avrdude, the firmware of the device must be updated via 'dfu-programmer'.
Olimex provides a firmware update: 'libUSB-AVRISP-MKII.hex'

https://www.olimex.com/Products/AVR/Programmers/AVR-ISP-MK2\
/resources/AVR-ISP-MK2-Firmware-WindowsDrivers.zip

directory: AVR-ISP-MK2-Firmware-WindowsDrivers/Firmware_Drivers/\
FIRMWARE-FOR-AVRDUDE-LIBUSB/

file: libUSB-AVRISP-MKII.hex
README.txt: "based on latest stable LUFA as of 06/01/2016"

connect the AVR-ISP-MK2 programmer to a USB port - possibly via a USB-B to
USB-A adapter - and press the clearly marked 'upgrade' button. This should
turn the (orange and red) LEDs off. the programmer itself is an AT90USB162
device, upgraded with the following commands:

> dfu-programmer at90usb162 erase
> dfu-programmer at90usb162 flash libUSB-AVRISP-MKII.hex
> dfu-programmer at90usb162 start

at this point the LEDs should be on again. it is ready for use by avrdude,
with '-c avrisp2' as the programmer ID, and '-P usb' as the device port.

the simple board being used has a 40 PDIP ZIF socket, and is connected to
the programmer via a 10-pin ICSP header. the programmer also provides the
power with the jumpers set to 5V:ON (the default). the following test was
performed with an AVR ATmega32 MCU:

...

> avrdude -c avrisp2 -p m32 -P usb

avrdude: AVR device initialized and ready to accept instructions

Reading | ################################################## | 100% 0.01s

avrdude: Device signature = 0x1e9502 (probably m32)

avrdude: safemode: Fuses OK (E:FF, H:C9, L:FF)

avrdude done.  Thank you.

################################################################################
